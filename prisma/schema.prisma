// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// creation of schemas starts Here 

// snipppets here 

// end of the snippets 

model User {
  id                       Int       @id @default(autoincrement())
  firstName                String?
  lastName                 String?
  username                 String?   @unique
  email                    String    @unique
  is_email_verified        Boolean   @default(false)
  phonenumber              Int?
  is_phone_number_verified Boolean   @default(false)
  bio                      String
  password                 String?
  gender                   String?
  photoUrl                 String?
  bannerId                 String?
  isConfigured             Boolean?
  geohashLocation          String?
  locationName             String?
  locationId               Int?
  connections              Connection[]
  activities               UserActivity[]
  events                   Event[]  
  createdAt                DateTime  @default(now())
  updatedAt                DateTime? @updatedAt
  role                     Role      @default(USER)
  otp                      Otp?

  // for me to have userID in the eventattendee table it seems I need to add this field?
  eventAttendees           EventAttendee[]

  // 
  @@map("users")
}

// this defines the user role => will change basing on the client requirements
enum Role {
  USER
  ADMIN
}

model Otp {
  id     Int  @id @default(autoincrement())
  otp    Int
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
}

model Location {
  id Int @id @default(autoincrement())
  lat Float?
  long Float?
  
}

model Connection {
  id Int  @id @default(autoincrement()) 
  connectedUser User?  @relation(fields: [connectedUserId], references: [id])
  connectedUserId Int?
}

model UserActivity {
  id Int  @id @default(autoincrement()) 
  skillLevel String?
  nature String?
  userActivityActivityId Int?
  activity Activity? @relation(fields: [userActivityActivityId], references: [id])

  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Activity {
  id Int  @id @default(autoincrement()) 
  natures String[]
  skillLevels String[]

  // defining the relationship between the activity and the user
  UserActivity UserActivity[]
}

model Event {
  id Int  @id @default(autoincrement()) 
  hostId String?
  title String?
  description String?
  status String?
  startTime DateTime?
  endTime DateTime?
  location String?
  attendees EventAttendee[]

  user User? @relation(fields: [userId], references: [id])
  userId Int?
}

model EventAttendee {
  id Int  @id @default(autoincrement())
  status String?
  

  userId Int?
  eventId Int?
  event Event? @relation(fields: [eventId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}



// end of schema creation 
